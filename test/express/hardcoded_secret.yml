patterns:
  - pattern: |
      $<MODULE>($<SECRET_IN_HASH>)
    filters:
      - variable: MODULE
        detection: javascript_express_hardcoded_secret_module
      
      - variable: SECRET_IN_HASH
        detection: javascript_express_hardcoded_secret_in_hash
  - pattern: |
      $<MODULE>.sign($<_>, $<_:string>,$<...>)
    filters:
      - variable: MODULE
        detection: javascript_express_hardcoded_secret_jsonwebtoken
  - pattern: |
      $<FUNCTION>($<_>, $<_:string>,$<...>)
    filters:
      - variable: FUNCTION
        detection: javascript_express_hardcoded_secret_jsonwebtoken_sign

languages:
  - javascript

helper_patterns:
  - id: javascript_express_hardcoded_secret_in_hash
    patterns:
      - pattern: |
          { secret: $<_:string> }
  - id: javascript_express_hardcoded_secret_module
    patterns:
      - pattern: $<LIBRARY>
        filters:
          - variable: LIBRARY
            detection: javascript_shared_import_library
      - pattern: |
          import $<!>$<_> from "expressjwt"
      - pattern: |
          import * as $<!>$<_> from "expressjwt"
      - pattern: |
          import $<!>$<_> from "session"
      - pattern: |
          import * as $<!>$<_> from "session"
      - pattern: jwt
      - pattern: expressjwt
      - pattern: session
  - id: javascript_express_hardcoded_secret_jsonwebtoken
    patterns:
      - pattern: $<LIBRARY>
        filters:
          - variable: LIBRARY
            detection: javascript_shared_import_library
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                values:
                  - 'jsonwebtoken'
      - pattern: |
          import $<!>$<_> from "jsonwebtoken"
      - pattern: |
          import * as $<!>$<_> from "jsonwebtoken"
      - pattern: jwt
      - pattern: jsonwebtoken
  - id: javascript_express_hardcoded_secret_jsonwebtoken_sign
    patterns:
      - pattern: $<SIGN>
        filters:
          - variable: SIGN
            detection: javascript_shared_import_member
            filters:
              - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
                values: 
                  - 'jsonwebtoken'
              - variable: JAVASCRIPT_SHARED_IMPORT_MEMBER_NAME
                values: 
                  - 'sign'
      - pattern: |
          import { $<!>sign } from "jsonwebtoken"
      - pattern: |
          import { sign as $<!>$<_> } from "jsonwebtoken"
  - id: javascript_shared_import_member
    patterns:
      - pattern: |
          const { $<!>$<JAVASCRIPT_SHARED_IMPORT_MEMBER_NAME> } = $<JAVASCRIPT_SHARED_IMPORT_MEMBER_LIBRARY>
        filters:
          - variable: JAVASCRIPT_SHARED_IMPORT_MEMBER_LIBRARY
            detection: javascript_shared_import_library
  - id: javascript_shared_import_library
    patterns:
      - pattern: |
          require($<JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME>)
        filters:
          - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
            values: 
              - 'jsonwebtoken'
      - pattern: |
          import($<JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME>)
        filters:
          - variable: JAVASCRIPT_SHARED_IMPORT_LIBRARY_NAME
            values: 
              - 'jsonwebtoken'

severity: critical
metadata:
  description: "Usage of hard-coded secret"
  remediation_message: |
    ## Description

    Storing secrets directly in code compromises security. It's safer to use environment variables or a secret management system.

    ## Remediations

    - **Do not** store plaintext secrets in your code. This makes your application vulnerable to unauthorized access if the codebase is exposed.
      ```javascript
      app.use(
        session({
          secret: "shh-my-secret",
          name: "my-custom-session-name",
        })
      )
      ```
    - **Do** use environment variables to store secrets. This method keeps sensitive information out of your codebase.
      ```javascript
      app.use(
        session({
          secret: process.env.SECRET,
          name: "my-custom-session-name",
        })
      )
      ```
    - **Do** use a secret management system or a key management service (KMS) with encryption for enhanced security. These services provide secure storage and management of secrets, reducing the risk of exposure.

    ## References

    - [OWASP hardcoded passwords](https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_pas
