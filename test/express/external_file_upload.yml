patterns:
  - pattern: res.sendFile($<USER_INPUT>)
    filters:
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
  - pattern: res.sendFile($<PATH>.resolve($<USER_INPUT>))
    filters:
      - variable: PATH
        detection: javascript_path_common_user_input
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
  - pattern: res.sendFile($<_>, $<OPTIONS>,$<...>)
    filters:
      - variable: OPTIONS
        detection: javascript_express_external_file_upload_root_option_user_input
  - pattern: res.sendFile($<_>, $<USER_INPUT>,$<...>)
    filters:
      - variable: USER_INPUT
        detection: javascript_shared_common_user_input
languages:
  - javascript
helper_patterns:
  - id: javascript_express_external_file_upload_root_option_user_input
    patterns:
      - pattern: |
          { root: $<ROOT_VALUE> }
        filters:
          - not:
              variable: ROOT_VALUE
              detection: javascript_root_common_user_input

  - id: javascript_root_common_user_input
    patterns:
      - pattern: $<PATH>.join($<_>, $<USER_INPUT>)
        filters:
          - variable: PATH
            detection: javascript_path_common_user_input
          - variable: USER_INPUT
            detection: javascript_shared_common_user_input

  - id: javascript_shared_common_user_input
    patterns:
      - pattern: var $<!>$<_> = req.params.file

  - id: javascript_file_common_user_input
    patterns:
      - pattern: var $<!>$<_> = req.params.file

  - id: javascript_path_common_user_input
    patterns:
      - pattern: var $<!>$<_> = require("path")
metadata:
  description: Unsanitized user input in HTTP send file request
  remediation_message: |-
    ## Description

    Using unsanitized user input in the sendFile API call exposes your application to path manipulation attacks. This vulnerability allows attackers to access files and resources they shouldn't be able to, by manipulating file paths in requests.

    ## Remediations

    - **Do** set the `root` option to an absolute path to a directory when using `sendFile`. This confines the accessible files to a specific directory, preventing attackers from accessing files outside of this directory.
      ```javascript
      app.post("/upload", (req, res) => {
        var options = {
          root: path.join(__dirname, "upload")
        };
        res.sendFile(req.params.filename, options);
      });
      ```

    ## References

    - [Express sendFile API reference](http://expressjs.com/en/5x/api.html#res.sendFile)
  cwe_id:
    - 73
  id: "javascript_express_external_file_upload"
severity: high
